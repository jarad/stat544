\documentclass[handout,xcolor=pdftex,dvipsnames,table]{beamer} % for handouts
%\documentclass{beamer}


\usecolortheme[RGB={0,0,144}]{structure}
\usetheme{AnnArbor}\usecolortheme{beaver}
%\usetheme{CambridgeUS}\usecolortheme{crane}

\usepackage{verbatim,xmpmulti,color,multicol,multirow,tikz,animate}
\setlength{\unitlength}{\textwidth}  % measure in textwidths
\usepackage[normalem]{ulem}

%\usepackage{beamerthemesplit}
\setbeamertemplate{navigation symbols}{}
%\setbeamercolor{alerted text}{fg=red}
%\setbeamertemplate{block body theorem}{bg=orange}
\setkeys{Gin}{width=0.6\textwidth}


\title[Change-point]{Change-point analysis}
\author[Jarad Niemi]{Dr. Jarad Niemi}
\institute[Iowa State]{Iowa State University}
\date{\today}

\newcommand{\I}{\mathrm{I}}

\newcommand*{\approxdist}{\mathrel{\vcenter{\offinterlineskip
\vskip-.25ex\hbox{\hskip.55ex$\cdot$}\vskip-.25ex\hbox{$\sim$}
\vskip-.5ex\hbox{\hskip.55ex$\cdot$}}}}

\begin{document}

%\section{Temp??} \begin{comment}

<<chunk_options, echo=FALSE, message=FALSE>>=
library(knitr) # only needed so the following command does not fail when sourcing R code
opts_chunk$set(fig.width=6, fig.height=5, out.width='.8\\linewidth', fig.align='center', size='tiny')
##############################################
# Change-point analysis                      #
##############################################
library(reshape2)
library(plyr)
library(ggplot2)
library(rjags)
library(rstan)
set.seed(20140410)
@

\frame{\maketitle}

\begin{frame}[fragile]
\frametitle{}

Did the users text habits change over time?
{\tiny \url{http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/}}

<<data, fig.width=8>>=
d = read.csv("txtdata.csv", header=F)
names(d) = "texts"
d$day = 1:nrow(d)
qplot(day, texts, data=d)
@
\end{frame}
 
 
\begin{frame}
\frametitle{Modeling}
Let $Y_t$ be the number of texts on day $t$. \pause Assume
\[ Y_t \stackrel{ind}{\sim} Po(\lambda_t) \]
\pause with 
\[ \lambda_t = \left\{ \begin{array}{ll} 
\mu_1 & \mbox{if } t<\tau \\
\mu_2 & \mbox{if } t \ge \tau
\end{array} \right. \]
\pause where $\mu_1$, $\mu_2$, and $\tau$ are all unknown \pause and 

\begin{itemize}
\item $\mu_1$ represents the ``standard'' texting rate
\item $\mu_2$ represents a new texting rate
\item $\tau$ represents the day the texting rate changed
\end{itemize}
\end{frame}




\begin{frame}
\frametitle{Maximum likelihood estimation}

How would you find an MLE? 

\vspace{0.2in} \pause 

By definition, the mle is

\[ \mbox{argmax}_{\mu_1,\mu_2,\tau} L(\mu_1,\mu_2,\tau)  \]
where 
\[ L(\mu_1,\mu_2,\tau) = \prod_{t=1}^T Po(y_t|\mu_1)^{\mathrm{I(t<\tau)}} Po(y_t|\mu_2)^{\mathrm{I(t\ge\tau)}} \]

\vspace{0.2in} \pause

One appraoch is to iterate over $\tau=\{1,\ldots,T\}$ and optimize the likelihood for each and then find the optimal over these choices.
\end{frame}
 
 
 
\begin{frame}[fragile]
<<mle, fig.width=10>>=
mle = ddply(data.frame(tau=seq(1,nrow(d),by=1)), .(tau), function(x) {
  d$change = (d$day >= x$tau)
  tmp = ddply(d, .(change), summarize, mean=mean(texts))
  data.frame(mu1 = tmp$mean[1], mu2 = tmp$mean[2], 
             log_like = sum(dpois(d$texts, tmp$mean[1+d$change], log=TRUE)))
})
qplot(tau, log_like, data=mle)
@
\end{frame}
 
 

\begin{frame}
\frametitle{Confidence interval}

How can you quantify uncertainty in the parameter estimates? \pause How about obtaining confidence intervals?

\vspace{0.2in} \pause 

The difficulty comes in dealing with the likelihood:
\[ L(\mu_1,\mu_2,\tau) = \prod_{t=1}^T Po(y_t|\mu_1)^{\mathrm{I(t<\tau)}} Po(y_t|\mu_2)^{\mathrm{I(t\ge\tau)}} \]
since $\tau$ occurs in an indicator function in an exponent.
\end{frame}



\section{Bayesian analysis}
\begin{frame}
\frametitle{Bayesian analysis}

To conduct a Bayesian analysis with the statistical model 
\[ Y_t \stackrel{ind}{\sim} Po(\lambda_t) \]
\pause with 
\[ \lambda_t = \left\{ \begin{array}{ll} 
\mu_1 & \mbox{if } t<\tau \\
\mu_2 & \mbox{if } t \ge \tau
\end{array} \right. \]
we need a joint prior for $\mu_1$, $\mu_2$, and $\tau$. 

\vspace{0.2in} \pause

The suggested prior is 
\[ \begin{array}{ll}
\mu_1 &\sim Exp(\overline{y}) \\
\mu_2 &\sim Exp(\overline{y}) \\
\tau &\sim Unif(1,n)
\end{array} \]
where $Exp(\eta)$ has mean $\eta$ and $\mu_1$, $\mu_2$, and $\tau$ are assumed to be independent. \pause This uses the data twice since the prior for the $\mu$s depends the data, but is relatively inocuous. 
\end{frame}


\section{JAGS}
\begin{frame}[fragile]
\frametitle{JAGS help}

<<jags_help>>=
head(jags.model,2)
head(coda.samples,1)
@

\end{frame}



\begin{frame}[fragile]
<<jags, tidy=FALSE, cache=TRUE>>=
jags_model = "
model {
  for (t in 1:n) {
    y[t] ~ dpois(lambda[t])
    lambda[t] <- ifelse(t<tau, mu[1], mu[2])
  }
  mu[1] ~ dexp(mu_mean)
  mu[2] ~ dexp(mu_mean)
  tau   ~ dcat(p)
}
"

m = jags.model(textConnection(jags_model),
               inits = list(tau=46, mu=rep(mean(d$texts),2)),
               data=list(n=nrow(d), y=d$texts, mu_mean=1/mean(d$texts), p = rep(1,nrow(d))),
               n.adapt=0)
r = coda.samples(m, c("lambda","mu","tau"), 80000, thin=20)
@
\end{frame}






\begin{frame}[fragile]
<<jags_plots, dependson="jags">>=
plot(r[,c("mu[1]","mu[2]","tau")])
@
\end{frame}



\begin{frame}[fragile]
<<tau_summary, dependson="jags">>=
tau_post = table(unlist(r[,"tau"]))
tau_post/sum(tau_post)

summary(r[,c("mu[1]","mu[2]")])
@
\end{frame}


\begin{frame}[fragile]
<<lambda, fig.width=10, dependson="jags">>=
s = summary(r[,paste("lambda[",1:nrow(d),"]", sep="")])
q = data.frame(x = 1:nrow(d), lb=s$quantiles[,1], m = s$quantiles[,3], ub=s$quantiles[,5])
ggplot()+geom_point(data=d, aes(x=day, y=texts))+geom_line(data=q, aes(x=x, y=m ), color="red", lty=2)+
  geom_line(data=q, aes(x=x, y=lb), color="red")+geom_line(data=q, aes(x=x, y=ub), color="red")
@
\end{frame}


\subsection{Multichain}
\begin{frame}
\frametitle{Multichain start in JAGS}

From JAGS manual:
\begin{quote}
If initial values are not supplied by the user, then each parameter chooses its own initial
value based on the values of its parents. The initial value is chosen to be a ``typical value"
from the prior distribution. The exact meaning of ``typical value" depends on the distribution
of the stochastic node, but is usually the mean, median, or mode.
\end{quote}

\vspace{0.2in} \pause

So, in order to run chains starting from initial values that are well dispersed relative to the posterior, you need to specify initial values yourself.
\end{frame}



\begin{frame}[fragile]
<<initial_values, tidy=FALSE, cache=TRUE>>=
m = jags.model(textConnection(jags_model),
               data=list(n=nrow(d), y=d$texts, mu_mean=1/mean(d$texts),p=rep(1,nrow(d))),
               inits = function() list(tau=sample(nrow(d),1), mu=rexp(2,1/mean(d$texts))), 
               n.chains=4, n.adapt=10000) # half of the iterations for burnin
r = coda.samples(m, c("lambda","mu","tau"), 10000, thin=10)
gelman.diag(r[,c("mu[1]","mu[2]","tau")])
@
\end{frame}



\begin{frame}[fragile]
<<initial_values_plot, tidy=FALSE, dependson='initial_values'>>=
plot(r[,c("mu[1]","mu[2]","tau")])
@
\end{frame}



\section{Stan}

\begin{frame}
\frametitle{Stan}

From \url{http://mc-stan.org/}:
\begin{quote}
Stan is a probabilistic programming language implementing statistical inference with

\begin{itemize}
\item Markov chain Monte Carlo sampling (NUTS, HMC)
\item Optimization-based point estimation (BFGS)
\end{itemize}

Stan is coded in C++ and runs on all major platforms (Windows, Mac, Linux).

Stan is freedom-respecting, open-source software.
\end{quote}

To install RStan, follow the instructions on \url{https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started}.

\end{frame}


\begin{frame}[fragile]
\frametitle{Stan help}

<<stan_help>>=
head(stan_model,3)
head(getMethod("sampling","stanmodel"),7)
@

\end{frame}


\begin{frame}[fragile]

<<stan_model, tidy=FALSE>>=
stan_model = "
data {
  int<lower=1> n;
  int<lower=0> y[n];
  real<lower=0> mu_mean;
}

parameters {
  real<lower=1, upper=n> tau;
  real<lower=0> mu[2];
}

transformed parameters {
  real<lower=0> lambda[n];
  for (t in 1:n) {
    lambda[t] <- if_else(t<tau, mu[1], mu[2]);
  }
}

model {
  for (t in 1:n) {
    y[t] ~ poisson(lambda[t]);
  }
  mu[1] ~ exponential(mu_mean);
  mu[2] ~ exponential(mu_mean);
}
"
@
\end{frame}




\begin{frame}[fragile]
\frametitle{Compile Stan model}
<<stan_compiling, cache=TRUE>>=
m = stan_model(model_code=stan_model)
@
\end{frame}



\begin{frame}[fragile]
<<stan_sampling, dependson="stan_compiling", cache=TRUE>>=
r = sampling(m, data=list(y=d$texts, n=nrow(d), mu_mean=1/mean(d$texts)))
@
\end{frame}




\begin{frame}[fragile]
<<stan_summary>>=
print(r, c("tau","mu[1]","mu[2]"))
@
\end{frame}



\begin{frame}[fragile]
<<stan_traceplot>>=
traceplot(r, c("tau","mu[1]","mu[2]"))
@
\end{frame}




\begin{frame}[fragile]
<<stan_plot>>=
plot(r)
@
\end{frame}





\end{document}